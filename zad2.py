"""
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""


def find_fibonacci(number: int) -> dict:
    fibonacci_numbers = {0: 0, 1: 1}
    for i in range(2, number + 1):
        if i not in fibonacci_numbers.keys():
            fibonacci_numbers[i] = fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2]

    return fibonacci_numbers


def find_fibonacci_even(number):
    values = find_fibonacci(number)
    sum_of_even = 0
    for key, value in values.items():
        if value % 2 == 0:
            sum_of_even += value

    return sum_of_even

if __name__ == "__main__":
    fib_sum = find_fibonacci_even(200)
    print(fib_sum)
